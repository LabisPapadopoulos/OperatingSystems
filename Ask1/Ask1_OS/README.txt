											README - Ask1_OS (2012 - 2013)
											   Χαράλαμπος Παπαδόπουλος
											   ΑΜ: 1115200800169

=== semaphore.c ===
sem_init(): Δεσμεύει ένα σημαφόρο από το σύστημα δημιουργώντας τον αν δεν υπάρχει. Παίρνει σαν όρισμα το κλειδί του σημαφόρου (key_t) και επιστρέφει το αναγνωριστικό (id) του σημαφόρου (ακέραιος) ή -1 σε περίπτωση σφάλματος.

sem_P(): Κατεβάζει ένα σημαφόρο. Παίρνει σαν όρισμα το αναγνωριστικό του σημαφόρου (ακέραιος) και επιστρέφει 0 ή -1 σε περίπτωση σφάλματος.

sem_V(): Ανεβάζει ένα σημαφόρο. Παίρνει σαν όρισμα το αναγνωριστικό του σημαφόρου (ακέραιος) και επιστρέφει 0 ή -1 σε περίπτωση σφάλματος.

sem_finalize(): Αποδεσμεύει ενα σημαφόρο. Παίρνει σαν όρισμα το αναγνωριστικό του σημαφόρου (ακέραιος) και επιστρέφει 0 ή -1 σε περίπτωση σφάλματος.

=== memory.c ===
shm_init(): Δεσμεύει ένα τμήμα κοινής μνήμης για τα εισερχόμενα (IN) και εξερχόμενα (OUT) μηνύματα. Η διεύθυνση και το αναγνωριστικό της μνήμης αποθηκεύονται σε global μεταβλητές. Το μέγεθος της μνήμης που δεσμεύεται είναι ένα pid_t και ένας ακέραιος για τα εισερχόμενα μηνύματα (IN) και 80 χαρακτήρες για τα εξερχόμενα μηνύματα (OUT) δηλαδή (sizeof(pid_t) + sizeof(int) + SIZE * sizeof(char)). 
Επιστρέφει 0 ή -1 σε περίπτωση σφάλματος.

shm_finalize(): Αποδεσμεύει την κοινή μνήμη που είχε δεσμευτεί με την shm_init(). Επιστρέφει 0 ή -1 σε περίπτωση σφάλματος.

read_request(): Διαβάζει ένα εισερχόμενο μήνυμα από την κοινή μνήμη που είχε δεσμευτεί από την shm_init(). Δέχεται ως ορίσματα ένα δείκτη σε pid_t και ένα δείκτη σε ακέραιο στους οποίους θα αποθηκεύσει το pid του παιδιού του client C' και τον αριθμό του αρχείου που ζήτησε.

write_request(): Γράφει ένα εισερχόμενο μήνυμα στην κοινή μνήμη που είχε δεσμευτεί από την shm_init(). Δέχεται ως ορίσματα το pid του  παιδιού του client C' (pid_t) και ένα αριθμό του αρχείου (ακέραιος).

read_response(): Διαβάζει ένα εξερχόμενο μήνυμα από την κοινή μνήμη που είχε δεσμευτεί από την shm_init(). Δέχεται ως όρισμα ένα δείκτη σε χαρακτήρα στον οποίο θα αποθηκεύσει το περιεχόμενο της απάντησης.

write_response(): Γράφει ένα εξερχόμενο μήνυμα στην κοινή μνήμη που είχε δεσμευτεί από την shm_init(). Δέχεται ως όρισμα το περιεχόμενο της απάντησης (char *text).

=== main.c ===
main(): Διαβάζει από ορίσματα της γραμμής εντολών το πλήθος των C' που θα δημιουργηθούν (-n) και την παράμετρο λ της εκθετικής κατανομής (-l). Στη συνέχεια δεσμεύει (sem_init()) 3 σημαφόρους, τους sem_in, sem_out, sem_server και αρχικοποιεί τους 2 πρώτους σε 1 ανεβάζοντάς τους (sem_V). Αρχικοποιεί επίσης και το κομμάτι της κοινής μνήμης (shm_init()) και δημιουργεί μια ακόμα διεργασία η οποία θα εκτελέσει τον κώδικα του C (client()) ενώ η αρχική διεργασία αναλαμβάνει τον S (server()). Η αρχική διεργασία πριν επιστρέψει η main() περιμένει να τερματίσει ο Client και αποδεσμεύει τους σημαφόρους και την κοινή μνήμη. Η δέσμευση, η αρχικοποίηση και η αποδέσμευση των σημαφόρων και της κοινής μνήμης γίνεται από την αρχική διεργασία μόνο επειδή μ' αυτό τον τρόπο κληρονομούνται σε όλους τους απογόνους.

client(): Υλοποιεί τον Client C ο οποίος γεννάει παιδιά C' σε τυχαία χρονικά διαστήματα εκθετικά κατανεμημένα. Πριν επιστρέψει η συνάρτηση περιμένει να τερματίσουν όλα τα παιδιά που δημιούργησε. Παίρνει σαν ορίσματα τον αριθμό των παιδιών που θα δημιουργήσει (ακέραιος), τα αναγνωριστικά των σημαφόρων sem_in, sem_out, sem_server (ακέραιοι) και την παράμετρο λ της εκθετικής κατανομής (double). Επιστρέφει 0 ή -1 σε περίπτωση σφάλματος.
Κάθε παιδί του client C' στέλνει ένα εισερχόμενο μήνυμα που περιέχει το pid του και ένα τυχαίο αριθμό αρχείου. Για να εξασφαλιστεί η αποκλειστική πρόσβαση στη μνήμη IN αρχικά κατεβάζεται ο σημαφόρος sem_in και μετά στέλνεται το μήνυμα με χρήση της συνάρτησης  write_request(). Στη συνέχεια ανεβάζει το σημαφόρο sem_server για να ειδοποιήσει τον server για την αποστολή του μηνύματος. Αμέσως μετά περιμένει να λάβει απάντηση. Για να λάβει την απάντηση δεσμεύει δυναμικά ένα καινούριο σημαφόρο με κλειδί το pid του και τον κατεβάζει (αυτός είναι ο τρόπος του S' να τον ειδοποιήσει για την αποστολή της απάντησης). Ο εν λόγω σημαφόρος αποδεσμεύεται αμέσως μετά και ο C'  διαβάζει την απάντηση με την read_response(), ενημερώνει το log αρχείο με τα στοιχεία της δοσοληψίας και ανεβάζει τον σημαφόρο sem_out για να επιτραπεί η πρόσβαση άλλων S' στην μνήμη OUT. Η ενημέρωση του log αρχείου γίνεται πριν το ανέβασμα του σημαφόρου για μην αναμιγνύονται τα log μηνύματα άλλων C'. Μετά αυτή η διεργασία τερματίζει.

server(): Υλοποιεί τον Server S ο οποίος λαμβάνει εισερχόμενες αιτήσεις από τους C' και για κάθε μια γεννάει ένα παιδί S' το οποίο θα στείλει πίσω την απάντηση. Για να διαβάσει μια αίτηση κατεβάζει το σημαφόρο sem_server (είναι ο τρόπος που τον ειδοποιεί ένας C' για την αποστολή ενός αιτήματος), διαβάζει το αίτημα με χρήση της συνάρτησης read_request() και μετά ανεβάζει τον sem_in για να επιτρέψει την πρόσβαση στη μνήμη IN από τα παιδιά του client C'. Η όλη διαδικασία επαναλαμβάνεται τόσες φορές όσο και το πλήθος των C' επειδή ο S δεν έχει άλλο τρόπο να υπολογίσει πόσα αιτήματα θα του υποβληθούν. Πριν επιστρέψει η συνάρτηση περιμένει να τερματίσουν όλα τα παιδιά που δημιούργησε. Παίρνει ως ορίσματα το πλήθος των παιδιών C' και τους σημαφόρους sem_in, sem_out και sem_server (ακέραιοι). Επιστρέφει 0 ή -1 σε περίπτωση σφάλματος.
Κάθε παιδί του server S' διαβάζει τους πρώτους 80 χαρακτήρες από το αρχείο που αντιστοιχεί στο νούμερο που του έλαβε, κατεβάζει τον σημαφόρο sem_out για να εξασφαλισει την αποκλειστικότητα στην μνήμη OUT, γράφει την απάντηση με τη χρήση της συνάρτησης write_response(), δεσμεύει δυναμικά ένα σημαφόρο με κλειδί το pid του client που έλαβε (το έχε διαβάσει ο S) και τον ανεβάζει για να ειδοποιήσει τον C' για την αποστολή της απάντησης. Αμέσως μετά τερματίζει.

Compile: gcc -ansi -Wall *.c -o ask1 -lm
Εκτέλεση προγράμματος: ./ask1 -n 3 -l 0.2
Η άσκηση αναπτύχθηκε σε NetBeans 7.2 σε περιβάλλον ubuntu 12.04 LTS



